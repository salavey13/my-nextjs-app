export const zeroStageRequest= `
Hello. You are an expert coding assistant specializing in **TypeScript**, **React**, **Tailwind**, **Supabase**, and **Telegram Web Mini Apps**. You generate fully functional code components that are **plug-and-play** within the current environment.
Your task is to:
0. **Create a branch name for implementation of the component**

1. **Create a new React component** :  

### Key Considerations:

1. **Strict TypeScript Typing**:
   - All components must strictly follow TypeScript rules.
   - Ensure **null safety** with preemptive checks and type handling.
   - Use **type interfaces** to define props and state where necessary.
   
2. **Environment Details**:
   - The environment includes:
     - \`useAppContext()\` to access the **user** (\`telegram_id\`, etc.) and **t** function.
     - \`t()\` function for **translations**.
     - \`useTelegram()\` for **Telegram Web App features**.
     - Direct access to **Supabase** from any component.
     - Use Tailwind styling extencively with highlight #e1ff01
   - The project is deployed on **Vercel**, and it's a **serverless** setup.
   
3. **Directory Structure**:
   - New components should go into the \`components/game\` folder for game-related features.
   - Reusable UI elements (e.g., buttons, inputs, checkboxes) should go into \`components/ui\`.

4. **String Translation**:
   - Use the \`t()\` function for **all UI strings** {t} = useAppContext
   - Provide a matching **translation object** for any new text.

5. **Supabase Integration**:
   - Supabase can be imported directly in any component.
   - If new **Supabase tables** or **fields** are needed, generate table descriptions with example fields.

6. **Component Requirements**:
   - Components must be complete and **ready to deploy**. After generating the file, it should be usable after a simple \`git push\`.
   - **Comments** should be detailed and explain the functionality thoroughly.
   - If a component depends on existing ones, describe how they should interact or link to those components.

7. **Tone & Style**:
   - Use **slang** and **profanities** where it helps clarify or emphasize a point.
   - Ensure the language stays professional in technical areas but has an informal, direct, and entertaining tone where appropriate (e.g., dropping the occasional "fuck" when necessary).

2. **Extract all UI strings** used in the new component for translation. Implement the \`t()\` translation function correctly in the component and provide the translation keys for \`en\`, \`ru\`, and \`ukr\` languages in a TypeScript format, ready to be patched into tanslation files.

3. **Describe any new Supabase tables** required to support this feature. Provide the SQL commands to create these tables, formatted for direct integration into Supabase. 

4. **Update the 'README.md' file** to include a new section that documents the \`UserInfo\` component. This should include a feature description and usage instructions.

Each component in the \`/components\` and \`/components/ui\` folders can be used as examples for implementation. The \`adminDashboard.tsx\` file should serve as a reference for how to structure and format your response. Please ensure that the response is formatted for easy parsing and direct integration into the project.

Expected Output:
Component Implementation
   - The entire React component code should be provided, with the file path included as a comment at the top.

### Example Prompt:

_"Generate a new component for a game card with gyroscope-based hover effects. The component should use \`useAppContext\` to get the user's \`telegram_id\`, leverage Supabase to fetch the user's card deck, and apply \`useTelegram\` for custom Web App features. All UI strings should be wrapped in the \`t()\` function, and ensure strict TypeScript typing. Put the component in \`components/game\`, and include any new translation keys."_

You can use/modify existing tables and components as you wish:
  public.rents (
    id bigint generated by default as identity not null,
    user_id integer not null,
    rent_start timestamp with time zone not null default now(),
    rent_end timestamp with time zone not null,
    status text not null default 'active'::text,
    item_id bigint not null,
    game_state jsonb null, EXAMPLE{
{
  "cards": [
    {
      "id": "ace_of_spades",
      "position": { 
        "x": 0.5, 
        "y": 0.5 
        },
      "last_position": {
         "x": 0.4, 
         "y": 0.4 
         },
      "flipped": false,
      "rotations": 0,
      "velocity": { "x": 0, "y": 0 },
      "direction": { "x": 1, "y": -1 },
    }
  ]
}
}EXAMPLEOFF

Make sure to follow this format strictly to help automate the integration process.
Remember Output format:

File: components/<NewComponent>.tsx
"""tsx
// components/<NewComponent>.tsx
<code here>

Expected Response (Example)
Component Implementation:
File: components/Referral.tsx
"""tsx
//components/Referral.tsx
"use client";

import React, { useState, useEffect, Suspense, useCallback } from 'react';
import { supabase } from '../lib/supabaseClient';
import { useAppContext } from '../context/AppContext';
import { useTranslation } from 'react-i18next';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faUserPlus, faPaperPlane, faTrophy } from '@fortawesome/free-solid-svg-icons';
import LoadingSpinner from "../components/ui/LoadingSpinner";
import { Button } from "@/components/ui/button";

const Referral: React.FC = () => {
  const { user, t, updateUserReferrals  } = useAppContext();
  const [referralName, setReferralName] = useState('');
  const [referralCode, setReferralCode] = useState<string | null>(null);
  const [inviteCount, setInviteCount] = useState(0);
  const [isUpdating, setIsUpdating] = useState(false);

  useEffect(() => {
    fetchReferralData();
  }, [user]);

  const fetchReferralData = async () => {
...

  return (
    <Suspense fallback={<LoadingSpinner />}>
      <div className="p-6 bg-gray-800 rounded-lg shadow-lg">
        <h1 className="text-2xl font-bold text-white mb-4">
          <FontAwesomeIcon icon={faUserPlus} className="mr-2" />
          {t('inviteFriend')}
        </h1>
        <div className="mb-4">
          <label className="block text-gray-400 text-sm mb-1">
            {t('referralName')}
          </label>
          <input
            type="text"
            value={referralName}
            onChange={(e) => handleReferralNameChange(e.target.value)}
            className="input input-bordered w-full bg-gray-700 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            aria-label="Referral Name"
          />
        </div>
        <Button
          onClick={handleSendInvite}
          className="btn btn-primary flex items-center bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition justify-center w-full"
          aria-label="Send Invite"
          variant="outline"
        >
          <FontAwesomeIcon icon={faPaperPlane} className="mr-2" />
          {t('sendInvite')}
        </Button>
        <div className="mt-6 text-center">
          <FontAwesomeIcon icon={faTrophy} className="text-yellow-400 mb-2" />
          <p className="text-gray-400">
            {t('successfulInvites')}: {inviteCount}
          </p>
        </div>
      </div>
    </Suspense>
  );
};

export default Referral;
"""
`



















export const zeroStageRequest4Type = `Please create item type description similar to existing for the following idea of a task/rent/item:
{
  "ad_info": {
    "title": "Информация об объявлении",
    "fields": [
      {
        "name": "title",
        "type": "text",
        "label": "Заголовок объявления",
        "max_length": 50,
        "placeholder": "Не более 50 символов"
      },
      {
        "name": "description",
        "type": "textarea",
        "label": "Описание объявления",
        "max_length": 50,
        "placeholder": "Не более 50 символов"
      }
    ]
  },
  "pricing": {
    "title": "Цены",
    "fields": [
      {
        "name": "cars",
        "type": "number",
        "label": "Легковые автомобили",
        "placeholder": "TON",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      },
      {
        "name": "motorcycles",
        "type": "number",
        "label": "Мототехника",
        "placeholder": "TON",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      },
      {
        "name": "suvs",
        "type": "number",
        "label": "Внедорожник",
        "placeholder": "TON",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      },
      {
        "name": "minibus",
        "type": "number",
        "label": "Микроавтобус",
        "placeholder": "TON",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      },
      {
        "name": "suburban_tariff",
        "type": "number",
        "label": "Загородный тариф",
        "placeholder": "TON/км",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      }
    ]
  },
  "agreement": {
    "title": "Согласие",
    "fields": [
      {
        "name": "consent",
        "type": "checkbox",
        "label": "Я соглашаюсь с правилами использования сервиса, а также с передачей и обработкой моих данных в oneSitePls. Я подтверждаю своё совершеннолетие и ответственность за размещение"
      }
    ]
  },
  "general_info": {
    "title": "Общая информация",
    "fields": [
      {
        "name": "city",
        "type": "dropdown",
        "label": "Выберите город",
        "options": [
          "Москва",
          "Санкт-Петербург",
          "Новосибирск"
        ],
        "placeholder": "Москва"
      },
      {
        "name": "name",
        "type": "text",
        "label": "Ваше имя",
        "placeholder": "Введите ваше имя"
      },
      {
        "name": "mobile_number",
        "type": "text",
        "label": "Номер мобильного телефона",
        "placeholder": "+7 (999) 999 99 99"
      },
      {
        "name": "landline_number",
        "type": "text",
        "label": "Номер городского телефона",
        "placeholder": "+7 (999) 999 99 99"
      },
      {
        "name": "email",
        "type": "text",
        "label": "Ваш email",
        "placeholder": "example@gmail.com"
      },
      {
        "name": "parking_address",
        "type": "text",
        "label": "Адрес стоянки эвакуатора",
        "placeholder": "Введите адрес стоянки"
      }
    ]
  },
  "photo_upload": {
    "title": "Фото",
    "fields": [
      {
        "name": "photo",
        "type": "file",
        "label": "Прикрепите фотографию к объявлению",
        "button_text": "Загрузить"
      }
    ]
  }
}
  
{
  "ad_info": {
    "title": "Информация об объявлении",
    "fields": [
      {
        "name": "title",
        "type": "text",
        "label": "Заголовок объявления",
        "max_length": 50,
        "placeholder": "Не более 50 символов"
      },
      {
        "name": "description",
        "type": "textarea",
        "label": "Описание объявления",
        "max_length": 50,
        "placeholder": "Не более 50 символов"
      }
    ]
  },
  "pricing": {
    "title": "Цены",
    "fields": [
      {
        "name": "cars",
        "type": "number",
        "label": "Легковые автомобили",
        "placeholder": "TON",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      },
      {
        "name": "motorcycles",
        "type": "number",
        "label": "Мототехника",
        "placeholder": "TON",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      },
      {
        "name": "suvs",
        "type": "number",
        "label": "Внедорожник",
        "placeholder": "TON",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      },
      {
        "name": "minibus",
        "type": "number",
        "label": "Микроавтобус",
        "placeholder": "TON",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      },
      {
        "name": "suburban_tariff",
        "type": "number",
        "label": "Загородный тариф",
        "placeholder": "руб/км",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      }
    ]
  },
  "agreement": {
    "title": "Согласие",
    "fields": [
      {
        "name": "consent",
        "type": "checkbox",
        "label": "Я соглашаюсь с правилами использования сервиса, а также с передачей и обработкой моих данных в oneSitePls. Я подтверждаю своё совершеннолетие и ответственность за размещение"
      }
    ]
  },
  "general_info": {
    "title": "Общая информация",
    "fields": [
      {
        "name": "city",
        "type": "dropdown",
        "label": "Выберите город",
        "options": [
          "Москва",
          "Санкт-Петербург",
          "Новосибирск"
        ],
        "placeholder": "Москва"
      },
      {
        "name": "name",
        "type": "text",
        "label": "Ваше имя",
        "placeholder": "Введите ваше имя"
      },
      {
        "name": "mobile_number",
        "type": "text",
        "label": "Номер мобильного телефона",
        "placeholder": "+7 (999) 999 99 99"
      },
      {
        "name": "landline_number",
        "type": "text",
        "label": "Номер городского телефона",
        "placeholder": "+7 (999) 999 99 99"
      },
      {
        "name": "email",
        "type": "text",
        "label": "Ваш email",
        "placeholder": "example@gmail.com"
      },
      {
        "name": "parking_address",
        "type": "text",
        "label": "Адрес стоянки эвакуатора",
        "placeholder": "Введите адрес стоянки"
      }
    ]
  },
  "photo_upload": {
    "title": "Фото",
    "fields": [
      {
        "name": "photo",
        "type": "file",
        "label": "Прикрепите фотографию к объявлению",
        "button_text": "Загрузить"
      }
    ]
  }
}

Example for Dota 2 personal lesson:) Please imagine some funny paid experience in dota)):
{
  "lesson_info": {
    "title": "Информация о занятии",
    "fields": [
      {
        "name": "title",
        "type": "text",
        "label": "Название занятия",
        "max_length": 50,
        "placeholder": "Например: 'Мастер-класс по Pudge'"
      },
      {
        "name": "description",
        "type": "textarea",
        "label": "Описание занятия",
        "max_length": 100,
        "placeholder": "Опишите, чему вы будете учить (например: 'Как не фидить на миде')"
      }
    ]
  },
  "pricing": {
    "title": "Цены",
    "fields": [
      {
        "name": "solo_lesson",
        "type": "number",
        "label": "Индивидуальное занятие",
        "placeholder": "TON",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      },
      {
        "name": "party_lesson",
        "type": "number",
        "label": "Занятие для пати (до 5 игроков)",
        "placeholder": "TON",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      },
      {
        "name": "in_game_coaching",
        "type": "number",
        "label": "Коучинг во время игры",
        "placeholder": "TON/час",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      },
      {
        "name": "replay_analysis",
        "type": "number",
        "label": "Анализ реплея",
        "placeholder": "TON за один реплей",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      },
      {
        "name": "meme_builds",
        "type": "number",
        "label": "Создание мемных билдов",
        "placeholder": "TON",
        "disabled_option": "Услугу не оказываю",
        "disable_checkbox": true
      }
    ]
  },
  "agreement": {
    "title": "Согласие",
    "fields": [
      {
        "name": "consent",
        "type": "checkbox",
        "label": "Я соглашаюсь с тем, что мои MMR и нервы могут пострадать в процессе обучения, а также с передачей и обработкой моих данных в oneSitePls. Я подтверждаю своё совершеннолетие и готовность к Dota 2 мукам."
      }
    ]
  },
  "general_info": {
    "title": "Общая информация",
    "fields": [
      {
        "name": "username",
        "type": "text",
        "label": "Ваш ник в Dota 2",
        "placeholder": "Введите ваш ник"
      },
      {
        "name": "discord_tag",
        "type": "text",
        "label": "Ваш Discord тег",
        "placeholder": "Например: Gamer#1234"
      },
      {
        "name": "preferred_role",
        "type": "dropdown",
        "label": "Предпочитаемая роль",
        "options": [
          "Carry",
          "Mid",
          "Offlane",
          "Support",
          "Hard Support"
        ],
        "placeholder": "Выберите роль"
      },
      {
        "name": "favorite_hero",
        "type": "text",
        "label": "Любимый герой",
        "placeholder": "Введите имя героя"
      },
      {
        "name": "tilt_level",
        "type": "dropdown",
        "label": "Уровень тильта",
        "options": [
          "Не тильтую",
          "Немного тильтую",
          "Всегда тильтую"
        ],
        "placeholder": "Выберите уровень"
      }
    ]
  },
  "photo_upload": {
    "title": "Фото",
    "fields": [
      {
        "name": "profile_picture",
        "type": "file",
        "label": "Прикрепите фото профиля (опционально)",
        "button_text": "Загрузить"
      }
    ]
  }
}
`