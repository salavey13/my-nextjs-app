@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  /* Light and Dark Theme Variables */
  :root {
    --background: 220 100% 8%; /* #020728 */
    --foreground: 184 89% 48%; /* #11e6d0 */
    --card: 220 100% 8%; /* #020728 */
    --card-foreground: 184 89% 48%; /* #11e6d0 */
    --popover: 220 100% 8%; /* #020728 */
    --popover-foreground: 184 89% 48%; /* #11e6d0 */
    --primary: 184 89% 48%; /* #11e6d0 */
    --primary-foreground: 220 100% 8%; /* #020728 */
    --secondary: 315 100% 80%; /* #FFA9F3 */
    --secondary-foreground: 220 100% 8%; /* #020728 */
    --muted: 220 72% 15%; /* #0b1b40 */
    --muted-foreground: 184 89% 48%; /* #11e6d0 */
    --accent: 270 90% 13%; /* #1c063e */
    --accent-foreground: 184 89% 48%; /* #11e6d0 */
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 20% 98%;
    --border: 220 72% 15%; /* #0b1b40 */
    --input: 220 72% 15%; /* #0b1b40 */
    --ring: 184 89% 48%; /* #11e6d0 */
    --radius: 0.5rem;
  }

  /* @media (prefers-color-scheme: dark) {
    :root {
      --background: 220 13% 18%;
      --foreground: 210 15% 98%;
      --card: 220 13% 24%;
      --card-foreground: 210 15% 98%;
      --popover: 220 13% 24%;
      --popover-foreground: 210 15% 98%;
      --primary: 210 20% 40%;
      --primary-foreground: 210 15% 98%;
      --secondary: 220 13% 28%;
      --secondary-foreground: 210 15% 98%;
      --muted: 220 13% 24%;
      --muted-foreground: 220 15% 70%;
      --accent: 220 13% 24%;
      --accent-foreground: 210 15% 98%;
      --destructive: 0 84.2% 60.2%;
      --destructive-foreground: 210 15% 98%;
      --border: 220 13% 30%;
      --input: 220 13% 28%;
      --ring: 220 20% 40%;
      --radius: 0.5rem;
    } 
  }*/

  body {
    @apply bg-background text-foreground;
    margin: 0;
    padding: 0;
    font-family: 'Inter', sans-serif;
    background-color: hsl(var(--background));
    color: hsl(var(--foreground)); 
    text-rendering: optimizeLegibility;
    transition: background-color 0.3s ease, color 0.3s ease;
  }
  
  html {
    height: 100%;
  }

  .tarot-theme {
    --background: 270 50% 10%;
    --foreground: 60 100% 50%;
    --card: 270 50% 15%;
    --card-foreground: 60 100% 50%;
    --popover: 270 50% 15%;
    --popover-foreground: 60 100% 50%;
    --primary: 60 100% 50%;
    --primary-foreground: 270 50% 10%;
    --secondary: 310 50% 50%;
    --secondary-foreground: 60 100% 50%;
    --muted: 270 50% 20%;
    --muted-foreground: 60 100% 70%;
    --accent: 310 50% 50%;
    --accent-foreground: 60 100% 50%;
    --destructive: 0 100% 50%;
    --destructive-foreground: 60 100% 50%;
    --border: 270 50% 20%;
    --input: 270 50% 20%;
    --ring: 60 100% 50%;
  }
  
  .tarot-theme .btn-tarot {
    background-color: hsl(var(--primary));
    color: hsl(var(--primary-foreground));
    border: 2px solid hsl(var(--border));
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    transition: all 0.3s ease;
  }
  
  .tarot-theme .btn-tarot:hover {
    background-color: hsl(var(--accent));
    color: hsl(var(--accent-foreground));
    border-color: hsl(var(--accent));
  }
  
  .tarot-theme .input-tarot,
  .tarot-theme .textarea-tarot {
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
    border: 2px solid hsl(var(--border));
    padding: 0.5rem;
    border-radius: 0.25rem;
  }
  
  .tarot-theme .input-tarot:focus,
  .tarot-theme .textarea-tarot:focus {
    outline: none;
    border-color: hsl(var(--ring));
    box-shadow: 0 0 0 2px hsl(var(--ring) / 0.3);
  }

  /* Fixed h1 to remove stroke and add a clean gradient effect 
h1 {
  background: linear-gradient(45deg, #8e2de2, #4a00e0, #9c27b0);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-fill-color: transparent;
  animation: slide-in-left 1s ease-out;
   
  font-weight: 700;
}*/

/* Fix button text color on active state 
button {
  color: black !important;  Ensure black text on all states 
}*/

/*button:hover,
button:focus,
button:active {
  background-color: var(--accent-color);
  color: black !important;  Keep text black during interaction
} */

 h1 {
  /* Theme-based gradient */
  background: linear-gradient(45deg, #11e6d0, #FFA9F3, #1c063e); /* Using theme colors */
  background-size: 200% 200%; /* Creates a nice gradient flow */
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-fill-color: transparent;
  
  /* Font and animation settings */
  font-weight: 700;
  animation: slide-in-left 1s ease-out, glitch-stroke 3s infinite; /* Add glitch stroke animation */

  /* Stroke styles */
  position: relative;
}

/* Keyframes for Glitch Stroke Animation */
@keyframes glitch-stroke {
  0%, 100% {
    text-shadow: none;
  }
  5%, 10%, 30%, 35%, 50%, 55%, 80%, 85% {
    text-shadow:
      -2px 0 #11e6d0, 2px 0 #FFA9F3, /* Left & right strokes */
      0 -2px #1c063e, 0 2px #1c063e; /* Top & bottom strokes */
  }
}

/* Optional slide-in effect */
@keyframes slide-in-left {
  0% {
    transform: translateX(-100%);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}
 

@keyframes glitchyFadeIn {
  0% {
    opacity: 0;
    transform: translateX(5px);
  }
  50% {
    opacity: 0.7;
    transform: translateX(-3px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.animate-enter {
  animation: glitchyFadeIn 0.5s ease-in-out forwards;
}

.animate-leave {
  animation: glitchyFadeIn 0.5s ease-in-out reverse forwards;
}
  
/* Added neon glow variant */
.shadow-neon-glow {
  text-shadow: 0 0 8px rgba(0, 0, 0, 0.13), 0 0 16px rgba(136, 255, 0, 0.322);
}

/* Added neumorphism variant */
.shadow-neumorphism {
  background: hsl(var(--background));
  border-radius: var(--radius);
  box-shadow: 8px 8px 16px hsl(var(--background) / 0.4), -8px -8px 16px hsl(var(--foreground) / 0.2);
}

/* Add glitch shadow effect */
.glitchy-toast {
  filter: drop-shadow(0 0 5px rgba(255, 0, 0, 0.7)) drop-shadow(0 0 10px rgba(255, 255, 255, 0.5));
}
/* Make all toasts have an opaque background */
.Toastify__toast {
  background-color: hsl(var(--background)) !important;
  color: hsl(var(--foreground)) !important;
}

/* Navigation Animations */
nav {
  transition: transform 0.5s ease;
}


  

  .gradient-text {
    background: linear-gradient(45deg, #ff6f61, #d4a5a5);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .main-content {
    min-height: calc(100vh - 128px);
    padding-top: 64px;
    padding-bottom: 64px;
    backdrop-filter: blur(10px);
    background: linear-gradient(180deg, rgba(255, 255, 255, 0.9) 0%, rgba(240, 240, 240, 0.8) 100%);
  }

  header, footer {
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
    background-color: hsl(var(--background) / 0.8);
    backdrop-filter: blur(10px);
  }

  * {
    @apply border-border;
  }

  .loader {
    border-top-color: hsl(var(--primary));
  }

  .neon-glow {
    text-shadow: 0 0 8px rgba(0, 0, 0, 0.13),
                0 0 16px rgba(136, 255, 0, 0.322),
                0 0 24px rgba(132, 0, 255, 0.007);
  }

  /* Custom Scrollbars */
  ::-webkit-scrollbar {
    width: 0px;
    height: 0px;
  }

  ::-webkit-scrollbar-track {
    background: hsl(var(--background));
  }

  ::-webkit-scrollbar-thumb {
    background-color: hsl(var(--primary));
    border-radius: 10px;
    border: 3px solid hsl(var(--background));
  }


  /* Button Ripple Effect */
  @keyframes ripple {
    to {
      transform: scale(4);
      opacity: 0;
    }
  }

  .button-ripple {
    position: relative;
    overflow: hidden;
  }

  .button-ripple::after {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.4);
    pointer-events: none;
    border-radius: 50%;
    transform: scale(0);
    animation: ripple 0.6s linear;
  }

  .button-ripple:active::after {
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%) scale(0);
  }

  /* Neumorphism */
  .neumorphism {
    background: hsl(var(--background));
    border-radius: var(--radius);
    box-shadow: 8px 8px 16px hsl(var(--background) / 0.4), -8px -8px 16px hsl(var(--foreground) / 0.2);
  }

  .input-neumorphism {
    @apply neumorphism;
    padding: 0.5rem 1rem;
    border: none;
  }

  .checkbox-neumorphism {
    @apply neumorphism;
    width: 24px;
    height: 24px;
  }

  .button-hover {
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
    
  
  }

  .button-hover:hover {
    background-color: hsl(var(--secondary));
    box-shadow: 0 0 10px hsl(var(--secondary));
  }

  .textarea-neumorphism, .dropdown-neumorphism {
    @apply neumorphism;
    padding: 0.5rem 1rem;
    border: none;
    background: hsl(var(--background));
    color: hsl(var(--foreground));
  }
  
  .textarea-neumorphism::placeholder, .dropdown-neumorphism::placeholder {
    color: hsl(var(--muted-foreground));
  }

  /* Dark mode: Adjust the background and accent color for checkboxes */
  @media (prefers-color-scheme: dark) {
    .checkbox-neumorphism {
      background-color: hsl(var(--background));
    }

    .peer:checked + .CheckboxIndicator {
      background-color: hsl(var(--accent-color));
    }
  }

  /* Example CSS forheight: calc(100vh); animations */
.game-board {
  min-height: calc(100vh);
    padding-top: 64px;
    padding-bottom: 64px;
  position: relative;
  width: 100vw;
  
  overflow: hidden;
}

.shuffle-button {
  position: fixed;
  bottom: 69px;
  left: 20px;
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 50%;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.shuffle-button:hover {
  background-color: #0056b3;
}

@keyframes ticker {
  0% {
    transform: translateX(0%);
  }
  100% {
    transform: translateX(-50%);
  }
}

.animate-ticker {
  animation: ticker 30s linear infinite;
  white-space: nowrap;
}

.drop-shadow-custom {
  filter: drop-shadow(0 0 0.75rem rgba(225, 255, 1, 0.5));
}
  /* Custom checkbox appearance */
input[type="checkbox"] {
  /* Remove default styling */
  appearance: none;
  -webkit-appearance: none;
  display: inline-block;
  width: 1.5rem;
  height: 1.5rem;
  background-color: hsl(var(--background));
  border: 2px solid hsl(var(--foreground)); /* Border color */
  border-radius: 0.25rem;
  transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
  position: relative;
}

/* Checkmark (visible only when checked) */
input[type="checkbox"]:checked {
  background-color: var(--accent-color); /* Background when checked */
  border-color: var(--accent-color); /* Border when checked */
}

input[type="checkbox"]:checked::after {
  content: '✔'; /* Checkmark symbol */
  color: hsl(var(--background)); /* White checkmark */
  font-size: 1rem;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

}
