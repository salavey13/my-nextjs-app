Hello , You are an expert coding assistant specializing in **TypeScript**, **React**, **Tailwind**, **Supabase**, and **Telegram Web Mini Apps**. You generate fully functional code components that are **plug-and-play** within the current environment. Your task is to upadate my GameBoard and MegaCard components to make them work together better in following ways: - card positions are stored in supabase "rents" table in jsonb field game_state which contains cards - a list of cards on gameboard. i want to save card position, previous position, amount of rotations after each drag or yeet. Previous position and number of rotations are needed to be replayed for second player on the other side. I want to be subscribed to change of card positions in game - souse supabase subscription from example below to implements it. Please also modify card drag movement and trajectory object that is passed back to gameboard shoul contain all card info. For actual drag movement - fix that card actually changes position after being yeeted (after gentle too, currently card is fixed on original position, returned to it after drag. Use "movement: [33, 209], velocity: [0, 1], direction: [1, -1] " info from spring to understand where to yeet, use movement as direction of loading the slingshot - so yeet in the opposite direction 3 times further. Plan calculate proportional number of rotations - once per 13 pixel of flight;) If velocity > 0 it's a yeet. dont use actual direction - it's inverted in y. btw, during the flip - rotate along X axis, and during flight - rotate over Z axis
0. **Create a branch name for implementation of the component**

1. **Create a new React component** :  

### Key Considerations:

1. **Strict TypeScript Typing**:
   - All components must strictly follow TypeScript rules.
   - Ensure **null safety** with preemptive checks and type handling.
   - Use **type interfaces** to define props and state where necessary.
   
2. **Environment Details**:
   - The environment includes:
     - `useAppContext()` to access the **user** (`telegram_id`, etc.) and **t** function.
     - `t()` function for **translations**.
     - `useTelegram()` for **Telegram Web App features**.
     - Direct access to **Supabase** from any component.
     - Use Tailwind styling extencively with highlight hsl(var(--secondary))
   - The project is deployed on **Vercel**, and it's a **serverless** setup.
   
3. **Directory Structure**:
   - New components should go into the `components/game` folder for game-related features.
   - Reusable UI elements (e.g., buttons, inputs, checkboxes) should go into `components/ui`.

4. **String Translation**:
   - Use the `t()` function for **all UI strings** {t} = useAppContext
   - Provide a matching **translation object** for any new text.

5. **Supabase Integration**:
   - Supabase can be imported directly in any component.
   - If new **Supabase tables** or **fields** are needed, generate table descriptions with example fields.

6. **Component Requirements**:
   - Components must be complete and **ready to deploy**. After generating the file, it should be usable after a simple `git push`.
   - **Comments** should be detailed and explain the functionality thoroughly.
   - If a component depends on existing ones, describe how they should interact or link to those components.

7. **Tone & Style**:
   - Use **slang** and **profanities** where it helps clarify or emphasize a point.
   - Ensure the language stays professional in technical areas but has an informal, direct, and entertaining tone where appropriate (e.g., dropping the occasional "fuck" when necessary).

2. **Extract all UI strings** used in the new component for translation. Implement the `t()` translation function correctly in the component and provide the translation keys for `en`, `ru`, and `ukr` languages in a TypeScript format, ready to be patched into tanslation files.

3. **Describe any new Supabase tables** required to support this feature. Provide the SQL commands to create these tables, formatted for direct integration into Supabase. 

4. **Update the 'README.md' file** to include a new section that documents the `UserInfo` component. This should include a feature description and usage instructions.

Each component in the `/components` and `/components/ui` folders can be used as examples for implementation. The `adminDashboard.tsx` file should serve as a reference for how to structure and format your response. Please ensure that the response is formatted for easy parsing and direct integration into the project.

Expected Output:
Component Implementation
   - The entire React component code should be provided, with the file path included as a comment at the top.

### Example Prompt:

_"Generate a new component for a game card with gyroscope-based hover effects. The component should use `useAppContext` to get the user's `telegram_id`, leverage Supabase to fetch the user's card deck, and apply `useTelegram` for custom Web App features. All UI strings should be wrapped in the `t()` function, and ensure strict TypeScript typing. Put the component in `components/game`, and include any new translation keys."_

You can use/modify existing tables and components as you wish:
  public.rents (
    id bigint generated by default as identity not null,
    user_id integer not null,
    rent_start timestamp with time zone not null default now(),
    rent_end timestamp with time zone not null,
    status text not null default 'active'::text,
    item_id bigint not null,
    game_state jsonb null, EXAMPLE{
  "cards": [
    {
      "id": "6_of_clubs",
      "position": {
        "x": 0.018670388180612,
        "y": 0.043583865879121664
      },
      "flipped": true,
      "last_trajectory": [
        {
          "x": 0.513767244829,
          "y": 0.0578535623573,
          "rotations": 0
        }
      ]
    },...
  ]
}EXAMPLEOFF

Make sure to follow this format strictly to help automate the integration process.
---

Expected Response (Example)
Component Implementation:
File: components/game/MagaCard.tsx
"""tsx
// components/game/MegaCard.tsx

import { animated, useSpring } from 'react-spring';
import { useRef, useEffect, useState } from 'react';
import { useGesture } from '@use-gesture/react';
import { cardsImages } from './CardsImgs';
import { useAppContext } from '@/context/AppContext';

interface Card {
  id: CardId;
  position: { x: number; y: number };
  trajectory: { rotation: number };
  flipped: boolean;
}

interface Point {
  x: number;
  y: number;
}

interface Player {
  id: string;
  position: Point;
}

interface GameState {
  cards: Card[];
  players: Player[];
}

export type CardId = keyof typeof cardsImages;

interface MegaCardProps {
  gameState: GameState;
  cardId: CardId;
  syncTrajectory: (cardId: CardId, trajectory: { x: number; y: number; rotation: number }) => void;
}

export const MegaCard: React.FC<MegaCardProps> = ({ gameState, cardId, syncTrajectory }) => {
  const cardRef = useRef<HTMLDivElement | null>(null);
  const lastPositionRef = useRef<{ x: number; y: number }>({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState<boolean>(false);
  const [isYeeted, setIsYeeted] = useState<boolean>(false);
  const [currentFlipAngle, setCurrentFlipAngle] = useState<number>(0);
  const { user } = useAppContext();

  const cardImage = gameState.cards.find((c) => c.id === cardId)?.flipped ? 'shirt' : cardId;

  // Spring for handling card animation
  const [{ x, y, shadow, flipAngle }, setSpring] = useSpring(() => ({
    x: 0,
    y: 0,
    shadow: 5,
    flipAngle: 0,
    config: { mass: 1, tension: 200, friction: 13 },
  }));

  useEffect(() => {
    const card = gameState.cards.find((c) => c.id === cardId);
    if (card) {
      const posX = card.position.x * window.innerWidth;
      const posY = card.position.y * window.innerHeight;
      lastPositionRef.current = { x: posX, y: posY };
      updateCardPosition(posX, posY, card.trajectory.rotation);
      setCurrentFlipAngle(card.flipped ? 180 : 0);
    }
  }, [gameState, cardId]);

  const updateGameState = (update: { x: number; y: number; flipped: boolean }) => {
    syncTrajectory(cardId, { x: update.x, y: update.y, rotation: currentFlipAngle });
  };

  const updateCardPosition = (x: number, y: number, rotation: number) => {
    setSpring({ x, y });
  };

  // Handle special YEET movement with overshoot
  const handleYeet = (velocityX: number, velocityY: number, deltaX: number, deltaY: number) => {
    if (!lastPositionRef.current || !cardRef.current) return;

    setIsYeeted(true);
    setSpring({ flipAngle: 180 });

    const signedDistanceX = deltaX > 0 ? Math.abs(velocityX) : -Math.abs(velocityX);
    const signedDistanceY = deltaY > 0 ? Math.abs(velocityY) : -Math.abs(velocityY);

    // Overshoot by 3 times the original distance
    const overshootX = lastPositionRef.current.x + signedDistanceX * 300;
    const overshootY = lastPositionRef.current.y + signedDistanceY * 300;

    setSpring({
      x: overshootX,
      y: overshootY,
      shadow: 15,
      config: { tension: 400, friction: 10 },
    });

    setTimeout(() => setIsYeeted(false), 500);

    updateGameState({
      x: overshootX / window.innerWidth,
      y: overshootY / window.innerHeight,
      flipped: true,
    });
  };

  // Gentle glide back for non-yeet movements
  const glideGently = (avgVelocity: number, deltaX: number, deltaY: number) => {
    if (!lastPositionRef.current) return;

    setSpring({
      x: lastPositionRef.current.x + deltaX * 10,
      y: lastPositionRef.current.y + deltaY * 10,
      shadow: 5,
      config: { tension: 120, friction: 26 },
    });

    updateGameState({
      x: (lastPositionRef.current.x + deltaX * 10) / window.innerWidth,
      y: (lastPositionRef.current.y + deltaY * 10) / window.innerHeight,
      flipped: false,
    });
  };

  const flipCard = () => {
    setCurrentFlipAngle((prev) => (prev === 0 ? 180 : 0));
    const flipped = currentFlipAngle === 0;
    updateGameState({ x: lastPositionRef.current.x, y: lastPositionRef.current.y, flipped });
  };

  const bind = useGesture({
    onDrag: ({ down, movement: [mx, my], velocity: [vx, vy], direction: [dx, dy] }) => {
      const avgVelocity = (Math.abs(vx) + Math.abs(vy)) / 2;

      if (down) {
        setIsDragging(true);
        setSpring({
          x: lastPositionRef.current.x + mx,
          y: lastPositionRef.current.y + my,
          shadow: 10,
          config: { tension: 300, friction: 20 },
        });
      } else {
        setIsDragging(false);

        if (dy > 0 && avgVelocity > 1.5) {
          // Yeet if dragged downwards with sufficient velocity
          handleYeet(vx, vy, mx, my);
        } else {
          // Gentle glide for regular movement
          glideGently(avgVelocity, mx, my);
        }
      }
    },
    onDoubleClick: () => flipCard(),
  });

  return (
    <animated.div
      ref={cardRef}
      {...bind()}
      style={{
        width: '69px',
        height: '100px',
        backgroundImage: `url(${cardsImages[cardImage]})`,
        borderRadius: '10px',
        backgroundSize: 'cover',
        position: 'absolute',
        cursor: 'grab',
        zIndex: 1,
        touchAction: 'none',
        transform: x.to((xVal) => `translate(${xVal}px, ${y.get()}px) rotateY(${flipAngle.get()}deg)`),
        //transform: flipAngle.to((angle) => `rotateY(${angle}deg)`),
        boxShadow: shadow.to((s) => `0px ${s}px ${s * 2}px rgba(0, 0, 0, 0.3)`),
      }}
    />
  );
};

// components\game\MergedGameBoard.tsx
import React, { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabaseClient'; // Supabase for state management
import MegaAvatar from './MegaAvatar'; // Import the updated MegaAvatar component
import { MegaCard, CardId } from "@/components/game/MegaCard"; // Import MegaCard component
import { Button } from '@/components/ui/button';
import { useAppContext } from '@/context/AppContext';
import PhysicsControls from './PhysicsControls';
import { useGesture } from '@use-gesture/react'; // Ensure you import this for gesture handling

// {
//     "cards": [
//       {
//         "id": "ace_of_spades",
//         "position": {
//           "x": 0.13347488956238615,
//           "y": 0.596567085140635
//         },
//         "flipped": false,
//         "trajectory": {
//           "prevposition": {
//             "x": 0.1,
//             "y": 0.1
//           },
//           "rotations": 13.420
//         },
//         "target_position": {
//           "x": 0.6,
//           "y": 0.5
//         },
//         "target_rotation": 90
//       }
//     ],
//     "players": [
//       {
//         "id": "43",
//         "position": {
//           "x": 184.60638548158315,
//           "y": 64.82521728032322
//         }
//       }
//     ]
//   }
const GAME_ID = 28;  // Replace with actual game ID

interface Point {
    x: number;
    y: number;
}



interface Card {
    id: CardId;
  position: { x: number; y: number };
  trajectory: { rotation: number };
  flipped: boolean;
}
interface MegaAvatarProps {
    playerId: number;
    initialPosition: Point;
    onPositionChange: (playerId: number, position: Point) => void;
  }
interface Player {
    id: string;
    position: { x: number; y: number };
}


  interface Point {
    x: number;
    y: number;
  }
interface GameState {
    cards: Card[];
    players: Player[];
}

const GameBoard: React.FC = () => {
    const [gameState, setGameState] = useState<GameState | null>(null);
    const [subscription, setSubscription] = useState<any>(null);
    const [playerPositions, setPlayerPositions] = useState<Record<string, { x: number; y: number }>>({});
    const [isLongPress, setIsLongPress] = useState(false);
    const [longPressStart, setLongPressStart] = useState(0);
    const { user, t } = useAppContext();

    const [targetFrame, setTargetFrame] = useState({
        x: 400,
        y: 300,
        rotation: 0,
    });

    const randomizeTargetFrame = () => {
        setTargetFrame({
            x: Math.random() * 320 + 100, // Assuming the board width is 1000px
            y: Math.random() * 320 + 100, // Assuming the board height is 600px
            rotation: 0//Math.random() * 360,
        });
    };

    // Parallax state for the shuffle button
    const [buttonParallax, setButtonParallax] = useState({ x: 0, y: 0 });

    useEffect(() => {
        // Subscribe to changes in the `rents` table for the current game
        const handleSubscription = async () => {
          // Initial fetch for game state
          const { data, error } = await supabase
            .from('rents')
            .select('game_state')
            .eq('id', user?.currentGameId) // Assuming user has currentGameId
            .single();
    
          if (error) {
            console.error('Error fetching game state:', error);
          } else {
            setGameState(data.game_state);
          }
    
          // Set up the real-time subscription using a Supabase Channel
          const channel = supabase
            .channel('notify_game_update')
            .on(
              'postgres_changes',
              { event: 'UPDATE', schema: 'public', table: 'rents', filter: `id=eq.${GAME_ID}` },
              (payload) => {
                setGameState(payload.new.game_state); // Update game state when change occurs
              }
            )
            .subscribe();
    
          // Clean up the subscription on unmount
          setSubscription(channel);
    
          return () => {
            supabase.removeChannel(channel);
          };
        };
    
        handleSubscription();
      }, [user]);
    
     

  const syncTrajectory = async (cardId: CardId, trajectory: { x: number; y: number; rotation: number }) => {
    if (!gameState) return;

    const updatedCards = gameState.cards.map(card =>
      card.id === cardId ? { ...card, trajectory: trajectory } : card
    );

    // Save updated game state 
    setGameState({ ...gameState, cards: updatedCards }) 
    }      



    const shuffleCards = async () => {
        if (!gameState) return;

        // Shuffle the cards array
        const shuffledCards = gameState.cards
            .map((card) => ({ ...card, position: { x: Math.random(), y: Math.random() } })) // Randomize positions
            .sort(() => Math.random() - 0.5); // Shuffle array

        // Update the game state with the shuffled cards
        const updatedGameState = { ...gameState, cards: shuffledCards };

        // Save the updated game state to Supabase
        const { error } = await supabase
            .from('rents')
            .update({ game_state: updatedGameState })
            .eq('id', user?.currentGameId);

        if (error) {
            console.error('Error updating game state:', error);
        } else {
            setGameState(updatedGameState); // Update local state
        }

        randomizeTargetFrame();
    };

    // Apply parallax to the shuffle button based on mouse movement
    const handleMouseMove = (event: React.MouseEvent) => {
        const { clientX, clientY } = event;
        const parallaxX = (clientX / window.innerWidth - 0.5) * 20; // Adjust strength
        const parallaxY = (clientY / window.innerHeight - 0.5) * 20;
        setButtonParallax({ x: parallaxX, y: parallaxY });
    };

    return (
        <div
            className="game-board-container min-h-[calc(100vh-128px)] overflow-y-auto overflow-x-auto"
            style={{ position: 'relative', width: '100vw' }}
            onMouseMove={handleMouseMove}
            {...bind()} // Attach gesture handlers
        >

            {/* Render cards */}
            <div>
                {gameState &&
                    gameState.cards.map((card) => (
                        <MegaCard key={card.id} gameState={gameState} cardId={card.id} syncTrajectory={syncTrajectory} />
                    ))}
            </div>

            <Button
                className="shuffle-button"
                onClick={shuffleCards}
                style={{
                    transform: `translate(${buttonParallax.x}px, ${buttonParallax.y}px)`,
                }}
            >
                {t('shufle')}
            </Button>

            {/* Target frame outline */}
            <div
                style={{
                    width: '100px',
                    height: '150px',
                    position: 'absolute',
                    borderColor: theme.colors.background,
                    top: targetFrame.y,
                    left: targetFrame.x,
                    transform: `rotate(${targetFrame.rotation}deg)`,
                    border: '2px dashed hsl(var(--secondary))',
                    borderRadius: '8px',
                }}
            />
        </div>
    );
};

export default GameBoard;

"""


- Output the entire file for this step, including the relative path on the first line as a comment.
- Make sure the output is formatted for easy replacement in project files.
- Provide complete code snippets, not just differences, to make integration easier.
- Ensure consistent formatting for ease of parsing by script.
Remember Output format:

File: components/<NewComponent>.tsx
"""tsx
// components/<NewComponent>.tsx
<code here>
"""

###Use this example of subscription to change oin supabase table:


useEffect(() => {
    supabase.auth
      .getUser()
      .then((user) => setUser(user.data.user))
      .then(async () => {
        await supabase.auth.getUser()
        const token = (await supabase.auth.getSession()).data.session?.access_token!
        supabase.realtime.setAuth(token)
        let main = supabase
          .channel('supaslack')
          .on('broadcast', { event: 'new_room' }, () => getChannels())
          .subscribe()
        setMainChannel(main)
        getChannels()
      })
      .then(() => {
        setLoading(false)
      })
  }, [supabase])

  useEffect(() => {
    if (document.getElementById('chat')) {
      document.getElementById('chat')!.innerHTML = ''
    }

    if (selectedRoom) {
      channel?.unsubscribe()
      setUsers(new Set())

      let newChannel = supabase.channel(selectedRoom, {
        config: {
          broadcast: { self: true },
          private: true, // This line will tell the server that you want to use a private channel for this connection
        },
      })

      newChannel
        .on('broadcast', { event: 'message' }, ({ payload: payload }) =>
          addMessage(payload.user_id == user?.id, false, payload.message)
        )
        .on('presence', { event: 'join' }, ({ newPresences }) => {
          newPresences.map(({ email }) => users.add(email))
          setUsers(new Set(users))
        })
        .on('presence', { event: 'leave' }, ({ leftPresences }) => {
          leftPresences.map(({ email }) => users.delete(email))
          setUsers(new Set(users))
        })
        .subscribe((status, err) => {
          setLoading(false)

          if (status == 'SUBSCRIBED') {
            setChannel(newChannel)
            newChannel.track({ email: user?.email })
            setError(null)
          }
          if (status == 'CLOSED') {
            setChannel(null)
          }
          if (status == 'CHANNEL_ERROR') {
            setError(err?.message || null)
          }
        })
    }
  }, [selectedRoom])